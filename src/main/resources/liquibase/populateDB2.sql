DELETE FROM course_module;
DELETE FROM module_resource;
DELETE FROM course;
DELETE FROM module;
DELETE FROM area;
DELETE FROM resource;


INSERT INTO area(id, name) VALUES (1, 'UI');
INSERT INTO area(id, name) VALUES (2, 'Java');
INSERT INTO area(id, name) VALUES (3, '.Net');
INSERT INTO area(id, name) VALUES (4, 'Design');

INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (1, 'Даний курс вивчає мінімалістичний підхід до дизайну об"єктів, який підкреслює зручність використання, більшою мірою орієнтований на кінцевого користувача. Курс буде цікавий студентам, які хотіли б оволодіти мистецтвом розробки веб-ресурсів згідно нових тенденцій дизайну', '604000', 'Flat UI', true, '2015-11-20', 1);
INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (2, 'Будуть розглянуті сучасні можливості каскадних таблиць стилів і їхню підтримку востанніх популярних браузерах', '483840', 'CSS', true, '2015-11-25', 1);
INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (3, 'Даний курс складається з п"яти модулів та екзаменаційного завдання. Кожен модуль містить посилання на матеріали відеохарактеру та допоміжну інформацію. Курс буде цікавий студентам, які хотіли б оволодіти мистецтвом розробки веб-ресурсів згідно нових тенденцій дизайну', '483800', 'HTML', true, '2015-11-30', 1);
INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (4, 'Даний курс орієнтований на вивчення Java як людьми з мінімальним рівнем знання програмування так і людей, які хочуть покращити свої знання з певних нюансів мови.', '483000', 'Java', true, '2015-12-01', 2);
INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (5, 'У Вас буде можливість вивчити технології та підходи до розробки Web-програм з багаторівневою архітектурою. Ви отримаєте досвід побудови Web-програм засобами ASP.NET MVC, Silverlight, побудови десктопних програм засобами WPF, реалізацію ORM засобами ADO.NET Entity, а також розробки Web-сервісів з допомогою WСF.', '4838400', '.Net', true, '2015-12-05', 3);
INSERT INTO course(id, description, duration, name, open, startdate, area_id) VALUES (6, 'Програма навчання сформована відповідно до вимог провідних ІТ компаній, що підтверджує Львівський Кластер ІТ-BPO. Це можливість всім починаючим дизайнерам та архітекторам з головою поринути в світ найперспективнішої сфери – дизайну в ІТ. Ринок потребує нових спеціалістів і Lviv UI/UX School ставить собі за мету підготувати справжніх професіоналів дизайну.', '483000', 'UX', true, '2015-12-10', 3);

INSERT INTO module(id, available, description, name, order_position) VALUES (1, true, '\"Теги\"? Теги це мітки, які ви використовуєте для вказівки браузеру, як він повинен показувати ваш web-сайт. Всі теги мають однаковий формат: вони починаються знаком \"&lt;\" і закінчуються знаком sign \"&gt;\". Зазвичай є два теги - відкриваючий: &lt;html&gt; і закриваючий: &lt;/html&gt;. Різниця в тому, що в закриваючому є слеш \"/\". Весь вміст, що вміщено між відкриваючими і закриваючими тегами, є вмістом тега. Але, як то кажуть, в кожному правилі є винятки, і в HTML також є теги, які є і відкривають, і закривають. Ці теги не містять тексту, а є мітками, наприклад, перенесення рядка виглядає так: &lt;br />. HTML - це теги, і нічого крім тегів. Для вивчення HTML потрібно вивчити різні теги. Наприклад, тег &lt;b&gt; інформує браузер, що весь текст між &lt;b&gt; і &lt;/b&gt; повинен бути надрукований жирним шрифтом. (\"b\" це скорочення від \"bold\".) ', 'Модуль 1. Introduction to Flat User Interface Design.', 1);
INSERT INTO module(id, available, description, name, order_position) VALUES (2, true, 'Форма в мережі є будь-якою областю на сторінці Web, де можна ввести інформацію, наприклад, введення тексту або чисел у текстовому полі, постановка прапорця, встановлення радіо-кнопки або вибір варіанта зі списку. Потім форма, після натискання на кнопку відправки, надсилається на Web-сайт. Використання форм в Web зустрічається повсюдно: для введення імен користувачів і паролів на екрані реєстрації, коментарі в блозі, заповнення профілю на сайті соціальної мережі або повідомлення інформації для рахунку на сайті магазина. Створити форму легко, але як щодо відповідності форми стандартам Web? До даного моменту, якщо ви пропрацювали навчальний курс за стандартами Web, будемо сподіватися, що ви вже переконалися, що стандарти Web є способом руху вперед. Код, який необхідно створити для доступної форми відповідно до стандартів, вимагає не більше роботи для реалізації, ніж неохайна форма.Тому, давайте почнемо з самої основної та простої форми, яку хтось, можливо, захоче використати, і після цього потроху будемо її ускладнювати – у цій лекції будуть розглянуті всі основні елементи, які необхідно знати для створення елегантної, доступної форми з допомогою HTML. ', 'Модуль 2. Flat UI Color Workflows', 2);
INSERT INTO module(id, available, description, name, order_position) VALUES (3, true, 'Як використовувати стандарти Web для організації безлічі даних? Сама ідея множини вкладених елементів, необхідних для перетворення всіх даних в симпатичні рядки та клітинки, повинна привести мозок у стан тривоги, але на щастя рішення є – на допомогу приходять таблиці! <br /> У Web-дизайні таблиці є хорошим способом організації даних в табличній формі. Іншими словами, завдяки таблицям, діаграмам та іншій графічній інформації, яка допомагає побачити і перетворити великий обсяг інформації в зведення, яке дозволяє порівнювати і зіставляти різні фрагменти даних. Ви зустрічаєте їх постійно на Web-сайтах, де вони представляють підсумки порівняння результатів політичних виборів, спортивної статистики, порівняння цін, таблиці розмірів, або інші дані. <br /> Раніше, в доісторичні часи Інтернет, перш ніж CSS став популярний як засіб поділу подання та структури HTML, таблиці використовувалися як засіб компонування Web-сторінок – для створення стовпців, боксів і загальної організації контенту. Це неправильний спосіб вирішення цих питань; використання таблиць для компонування призводить до громіздких, безладних сторінок з безліччю вкладених одна в одну таблиць – тобто великі розміри файлів, труднощі з обслуговуванням, труднощі з модифікацією після створення. Можна до цього часу бачити в Web такі сайти, але сьогодні необхідно використовувати таблиці тільки для того,для чого вони призначені – табличних даних – і використовувати CSS для управління компоновкою.<br /> Тут ми розглянемо, як правильно використовувати таблиці HTML – стаття має наступну структуру: <ul><li>Найбільша загальна таблиця</li><li>Додавання деяких властивостей</li><li>Додаткова структуризація таблиці</li><li>Допомога CSS: поліпшення вигляду таблиці</li></ul>) ', 'Модуль 3. Disadvantages of Flat UI', 3);
INSERT INTO module(id, available, description, name, order_position) VALUES (4, true, 'header - тег представляє собою набір початкових даних і певної навігації. В ньому розміщюють логотипи, заголовки, посилання на сайт, а інколи і меню навігації по сайту. Тобто цей елемент - це \"шапка\" веб-сторінки. article - тег який тепер буде дуже поширений=) Він відповідає статті, запису в блозі, замітці, новині. Все що відноситься, н-д, до вашої статті на сайті повинне бути включене в цей тег(тобто це і заголовок статті, дата, сам контент, а також коментарі). Щодо коментарів, то вони також окремі, але вкладені в основний. footer - назва говорить сама за себе, це нижня частина сайту, де зазвичай розміщюють авторські права, додаткову інформацію, лічильники. nav - тег виділяє панель навігації по сайту, меню.  На сторінці може бути декілька таких елементів. section - з допомогою нього можна розділяти веб-сторінку на певні тематичні розділи або розділіти статтю на розділи. Як правило має власний заголовок. Тег aside використовується для контенту, який повинен розміщуватись окремо від основного. Це може бути бокова панель, частина сторінки перед footer абощо. В тезі можна розміщувати меню, рекламу та інший додатковий контент.', 'Модуль 4. Flat UI Theme and HUD', 4);
INSERT INTO module(id, available, description, name, order_position) VALUES (5, true, 'Основным инструментом работы и динамических изменений на странице является DOM (Document Object Model) — объектная модель, используемая для XML/HTML-документов.<br />Согласно DOM-модели, документ является иерархией, деревом. Каждый HTML-тег образует узел дерева с типом «элемент». Вложенные в него теги становятся дочерними узлами. Для представления текста создаются узлы с типом «текст».<br />DOM — это представление документа в виде дерева объектов, доступное для изменения через JavaScript.', 'Модуль 5. Flat UI Pro Integration', 5);
INSERT INTO module(id, available, description, name, order_position) VALUES (6, true, 'На екзамен виносяться вузлові теоретичні питання, розрахункові задачі, проблемні ситуації, професійні завдання, що потребують творчої відповіді та вміння синтезувати набуті знання і використовувати їх для вирішення практичних задач тощо.', 'Екзаменаційне завдання', 6);
INSERT INTO module(id, available, description, name, order_position) VALUES (7, true, '\"Теги\"? Теги це мітки, які ви використовуєте для вказівки браузеру, як він повинен показувати ваш web-сайт. Всі теги мають однаковий формат: вони починаються знаком \"&lt;\" і закінчуються знаком sign \"&gt;\". Зазвичай є два теги - відкриваючий: &lt;html&gt; і закриваючий: &lt;/html&gt;. Різниця в тому, що в закриваючому є слеш \"/\". Весь вміст, що вміщено між відкриваючими і закриваючими тегами, є вмістом тега. Але, як то кажуть, в кожному правилі є винятки, і в HTML також є теги, які є і відкривають, і закривають. Ці теги не містять тексту, а є мітками, наприклад, перенесення рядка виглядає так: &lt;br />. HTML - це теги, і нічого крім тегів. Для вивчення HTML потрібно вивчити різні теги. Наприклад, тег &lt;b&gt; інформує браузер, що весь текст між &lt;b&gt; і &lt;/b&gt; повинен бути надрукований жирним шрифтом. (\"b\" це скорочення від \"bold\".) ', 'Модуль 1. Способи додавання стилів', 1);
INSERT INTO module(id, available, description, name, order_position) VALUES (8, true, '\"Теги\"? Теги це мітки, які ви використовуєте для вказівки браузеру, як він повинен показувати ваш web-сайт. Всі теги мають однаковий формат: вони починаються знаком \"&lt;\" і закінчуються знаком sign \"&gt;\". Зазвичай є два теги - відкриваючий: &lt;html&gt; і закриваючий: &lt;/html&gt;. Різниця в тому, що в закриваючому є слеш \"/\". Весь вміст, що вміщено між відкриваючими і закриваючими тегами, є вмістом тега. Але, як то кажуть, в кожному правилі є винятки, і в HTML також є теги, які є і відкривають, і закривають. Ці теги не містять тексту, а є мітками, наприклад, перенесення рядка виглядає так: &lt;br />. HTML - це теги, і нічого крім тегів. Для вивчення HTML потрібно вивчити різні теги. Наприклад, тег &lt;b&gt; інформує браузер, що весь текст між &lt;b&gt; і &lt;/b&gt; повинен бути надрукований жирним шрифтом. (\"b\" це скорочення від \"bold\".) ', 'Модуль 1.Теги: поняття, типи, підтримка', 1);
INSERT INTO module(id, available, description, name, order_position) VALUES (9, true, '\"Теги\"? Теги це мітки, які ви використовуєте для вказівки браузеру, як він повинен показувати ваш web-сайт. Всі теги мають однаковий формат: вони починаються знаком \"&lt;\" і закінчуються знаком sign \"&gt;\". Зазвичай є два теги - відкриваючий: &lt;html&gt; і закриваючий: &lt;/html&gt;. Різниця в тому, що в закриваючому є слеш \"/\". Весь вміст, що вміщено між відкриваючими і закриваючими тегами, є вмістом тега. Але, як то кажуть, в кожному правилі є винятки, і в HTML також є теги, які є і відкривають, і закривають. Ці теги не містять тексту, а є мітками, наприклад, перенесення рядка виглядає так: &lt;br />. HTML - це теги, і нічого крім тегів. Для вивчення HTML потрібно вивчити різні теги. Наприклад, тег &lt;b&gt; інформує браузер, що весь текст між &lt;b&gt; і &lt;/b&gt; повинен бути надрукований жирним шрифтом. (\"b\" це скорочення від \"bold\".) ', 'Модуль 1. Встановлення і налаштування середовища', 1);

INSERT INTO course_module(course_id, modules_id) VALUES (1, 1);
INSERT INTO course_module(course_id, modules_id) VALUES (1, 2);
INSERT INTO course_module(course_id, modules_id) VALUES (1, 3);
INSERT INTO course_module(course_id, modules_id) VALUES (1, 4);
INSERT INTO course_module(course_id, modules_id) VALUES (1, 5);
INSERT INTO course_module(course_id, modules_id) VALUES (1, 6);
INSERT INTO course_module(course_id, modules_id) VALUES (2, 7);
INSERT INTO course_module(course_id, modules_id) VALUES (3, 8);
INSERT INTO course_module(course_id, modules_id) VALUES (4, 9);

INSERT INTO resource(id, name, type, url) VALUES (1, 'Модуль 1. Відео.', 1, 'https://www.youtube.com/embed/LICSA6iJd6w');
INSERT INTO resource(id, name, type, url) VALUES (2, 'Модуль 1. Конспект. Частина 1.', 0, '');
INSERT INTO resource(id, name, type, url) VALUES (3, 'Модуль 1. Конспект. Частина 2.', 0, '');
INSERT INTO resource(id, name, type, url) VALUES (4, 'Модуль 2. Відео.', 1, 'https://www.youtube.com/embed/Y_dsckWhclE');
INSERT INTO resource(id, name, type, url) VALUES (5, 'Модуль 3. Конспект.', 0, '');
INSERT INTO resource(id, name, type, url) VALUES (6, 'Модуль 4. Конспект.', 0, '');

INSERT INTO module_resource(module_id, resources_id) VALUES (1, 1);
INSERT INTO module_resource(module_id, resources_id) VALUES (1, 2);
INSERT INTO module_resource(module_id, resources_id) VALUES (1, 3);
INSERT INTO module_resource(module_id, resources_id) VALUES (2, 4);
INSERT INTO module_resource(module_id, resources_id) VALUES (3, 5);
INSERT INTO module_resource(module_id, resources_id) VALUES (4, 6);
